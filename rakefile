require 'rake'
require 'rubygems'

desc "Get all Readings and save to a csv file"
task :make_csv do
  require './app.rb'

  @readings = Reading.all(:room => 'jroom')
  full_response = []
  @readings.each do |r|
    single_response = ""
    r.attributes.each do |k,v|
      if k == :time
        single_response += (v.to_time.utc.getlocal.to_i+25200).to_s
        single_response += ","
      elsif k == :noise
        single_response += v.to_s
      end
    end
    full_response << single_response
  end
  thecsv = full_response.join("\n")
  puts thecsv.length
  filename = 'public/all.csv'
  f = File.open(filename,'w')
  f.write(thecsv)
  f.close
end

desc "Split up a master csv into daily csvs"
task :split_by_day do
  if csv = File.open('public/all.csv','r').readlines
    dates = {}

    csv.each do |row|
      r = row.chomp.split(',')
      t = Time.at(r[0].to_i)
      day_string = "#{t.year}#{t.month}#{t.day}"
      dates[day_string] ||= []
      dates[day_string] << r.join(",")
    end

    dates.each do |k,v|
      f = File.open('public/'+k+'.csv','w')
      f.write(v.join("\n"))
      f.close
    end
  else
    puts "\e[0;33mERROR\e[m; Could Not Find public/all.csv"
  end
end

desc "Split all.csv into daily files averaged each minute"
task :split_by_day_average do
  if csv = File.open('public/all.csv','r').readlines
    puts "Opened public/all.csv"
    dates = {}

    csv.each do |row|
      r = row.chomp.split(',')
      t = Time.at(r[0].to_i)
      day_string = "#{t.year}-#{t.month}-#{t.day}"
      if dates[day_string].nil?
        dates[day_string] = {}
        puts day_string
        h = 0
        24.times do
          dates[day_string][h] ||= {}
          m = 0
          60.times do
            dates[day_string][h][m] ||= []
            m += 1
          end
          h += 1
        end
      end
      dates[day_string][t.hour][t.min] << r[1]
    end

    dates.each do |k,v|
      f = File.open('public/'+k+'-minutes.csv','w')
      averaged_output = []
      # hours
      v.each do |hour,min_hash|
        #minutes
        min_hash.each do |minute,noise_levels|
          # puts minute if k == "2011-10-22"
          readings_count = noise_levels.length.to_f
          if readings_count != 0
            total = 0
            noise_levels.each do |n|
              total += n.to_i
            end
            average = (total/readings_count).round
            date = k.split('-')
            # averaged_output << [ Time.new(date[0],date[1],date[2],hour,minute), average ].join(',')
            averaged_output << [ hour*60+minute, average ].join(',')
          else
            averaged_output << [ hour*60+minute, 0].join(',')
          end
        end
      end
      f.write(averaged_output.join("\n"))
      f.close
    end
  else
    puts "\e[0;33mERROR\e[m; Could Not Find public/all.csv"
  end
end

desc "Split all.csv into daily files averaged every two minutes"
task :two_minutes do
  if csv = File.open('public/all.csv','r').readlines
    puts "Opened public/all.csv"
    dates = {}

    csv.each do |row|
      r = row.chomp.split(',')
      t = Time.at(r[0].to_i)
      day_string = "#{t.year}-#{t.month}-#{t.day}"
      if dates[day_string].nil?
        dates[day_string] = {}
        puts day_string
        h = 0
        24.times do
          dates[day_string][h] ||= {}
          m = 0
          60.times do
            dates[day_string][h][m] ||= []
            m += 1
          end
          h += 1
        end
      end
      dates[day_string][t.hour][t.min] << r[1]
    end

    dates.each do |k,v|
      f = File.open('public/'+k+'-twominutes.csv','w')
      averaged_output = []
      leveraged_output = []
      # hours
      v.each do |hour,min_hash|
        #minutes
        min_hash.each do |minute,noise_levels|
          # puts minute if k == "2011-10-22"
          readings_count = noise_levels.length.to_f
          if readings_count != 0
            total = 0
            noise_levels.each do |n|
              total += n.to_i
            end
            average = (total/readings_count).round
            date = k.split('-')
            # averaged_output << [ Time.new(date[0],date[1],date[2],hour,minute), average ].join(',')
            averaged_output << [ hour*60+minute, average ]
          else
            averaged_output << [ hour*60+minute, 0]
          end
        end
      end

      l = (averaged_output.length)/2
      count = 0
      l.times do
        a1 = averaged_output[count]
        a2 = averaged_output[count+1]
        leveraged_output << [a1[0], ((a1[1]+a2[1])/2.0).round].join(",")
        count += 2
      end

      f.write(leveraged_output.join("\n"))
      f.close
    end
  else
    puts "\e[0;33mERROR\e[m; Could Not Find public/all.csv"
  end
end